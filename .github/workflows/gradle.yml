# language: yaml
name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/build.gradle','**/gradle.properties') }}
        restore-keys: |
          gradle-cache-${{ runner.os }}-

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

    - name: Make Gradle wrapper executable
      run: chmod +x ./gradlew

    - name: Prefetch dependencies (populate cache)
      run: ./gradlew --no-daemon --parallel --refresh-dependencies dependencies || true
      # tolerate non-zero if this step partially fails; build will try again with cached artifacts

    - name: Build with Gradle Wrapper
      run: ./gradlew build --no-daemon

    - name: Extract version from gradle.properties
      id: get_version
      run: |
        VERSION=$(grep "mod_version=" gradle.properties | cut -d'=' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Find built jar
      id: find_jar
      run: |
        JAR_FILE=$(find build/libs -name "*.jar" ! -name "*-sources.jar" | head -1)
        if [ -z "$JAR_FILE" ]; then
          echo "Error: No jar file found in build/libs"
          exit 1
        fi
        echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "Found jar: $JAR_FILE"

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        files: ${{ steps.find_jar.outputs.jar_file }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'SNAPSHOT') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
